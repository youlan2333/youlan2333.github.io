<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://youlan2333.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://youlan2333.github.io</link></image><lastBuildDate>Wed, 28 May 2025 12:52:36 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>程序控制</title><link>https://youlan2333.github.io/post/cheng-xu-kong-zhi.html</link><description>#### `FOR`

循环，循环计数值`INDX`，循环开始值`INIT`，循环结束值`FINAL`

运行过程：

1. 赋值（初始化）
2. 判断
3. 执行

要点：

1. 循环不执行时，循环体内不会被扫描
2. 循环执行结束时，INDX值=循环次数+1
3. `INIT`（开始值）大于`FINAL`（结束值）时，指令不执行
4. 循环开始需满足执行条件（有能流被扫描）和循环条件
5. `FOR-NEXT`循环嵌套时，最外层使用沿指令，最大嵌套八层循环

`（WDR）`：看门狗复位，扫描时间复位至500ms，复位软看门狗，最长延长至5000ms，5s触发硬看门狗

#### `SCR`

顺控，`SCR`：段开始指令，顺控继电器置位接通，复位断开

`（SCRT）`：段转移指令，本段复位，另段置位

`（SCRF）`：段结束指令

要点：

1. 首SCR开始时，需要手动置位
2. 对于顺控指令，使用置位指令时，需注意复位

#### `JMP`

跳转，跳转标签为常数，取值范围0~255

`（JMP）`被接通时，执行跳转，中间不被扫描不被执行，程序被跳转至LBL。</description><guid isPermaLink="true">https://youlan2333.github.io/post/cheng-xu-kong-zhi.html</guid><pubDate>Wed, 28 May 2025 12:51:56 +0000</pubDate></item><item><title>逻辑运算</title><link>https://youlan2333.github.io/post/luo-ji-yun-suan.html</link><description>`INV_B`：字节取反，1得0，0得1

`WAND_B`：字节与运算，全1得1，有0得0

`WOR_B`：字节或运算，全0得0，有1得1

`WXOR`：字节异或，相同得0，相异得1

要点：

1. 与运算`WAND`,可以使某些位置0，其余位不变
2. 或运算`WOR`,可以使某些位置1，其余位不变。</description><guid isPermaLink="true">https://youlan2333.github.io/post/luo-ji-yun-suan.html</guid><pubDate>Wed, 28 May 2025 12:51:21 +0000</pubDate></item><item><title>时钟</title><link>https://youlan2333.github.io/post/shi-zhong.html</link><description>#### BCD码

**4位二进制数表示1位十进制数**

| 十进制整数 |  0   |  1   |  2   |  3   |  4   |  5   |  6   |  7   |  8   |  9   |   10   |   11   |
| ---------: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :--: | :----: | :----: |
| 二进制整数 | 0000 | 0001 | 0010 | 0011 | 0100 | 0101 | 0110 | 0111 | 1000 | 1001 |  1010  |  1011  |
|    2#BCD码 | 0000 | 0001 | 0010 | 0011 | 0100 | 0101 | 0110 | 0111 | 1000 | 1001 | 1 0000 | 1 0001 |
|   16#BCD码 | 16#0 | 16#1 | 16#2 | 16#3 | 16#4 | 16#5 | 16#6 | 16#7 | 16#8 | 16#9 | 16#10  | 16#11  |

`READ_RTC`，`SET_RTC`：读写系统时间，装载T，从字节地址 T 开始的 8 字节，数据类型Byte

| T 字节 | 说明   | 数据值                             |
| ------ | ------ | ---------------------------------- |
| 0      | 年     | 00 至 99（BCD 值）20xx 年          |
| 1      | 月     | 01 至 12（BCD 值）                 |
| 2      | 日     | 01 至 31（BCD 值）                 |
| 3      | 小时   | 00 至 23（BCD 值）                 |
| 4      | 分     | 00 至 59（BCD 值）                 |
| 5      | 秒     | 00 至 59（BCD 值）                 |
| 6      | 保留   | 始终为 00                          |
| 7      | 星期几 | 使用 SET_RTC/TODW 指令写入时会忽略 |
。</description><guid isPermaLink="true">https://youlan2333.github.io/post/shi-zhong.html</guid><pubDate>Wed, 28 May 2025 12:50:32 +0000</pubDate></item><item><title>转换</title><link>https://youlan2333.github.io/post/zhuan-huan.html</link><description>- `B_I`：8位字节转16位整数
- `I_B`：16位整数转8位字节
- `I_DI`：16位整数转32位双整数
- `DI_I`：32位双整数转16位整数
- `DI_R`：32位双整数转32位浮点数
- `ROUND`：32位浮点数转32位双整数（四舍五入，适用200SMART）
- `TRUNC`：32位浮点数转32位双整数（截取）

要点：

1. 转换需逐级转换
2. 高级数据类型转低级数据类型会把高位字节置零
3. 高级数据类型转低级数据类型不能超出数据范围。</description><guid isPermaLink="true">https://youlan2333.github.io/post/zhuan-huan.html</guid><pubDate>Wed, 28 May 2025 12:48:06 +0000</pubDate></item><item><title>比较</title><link>https://youlan2333.github.io/post/bi-jiao.html</link><description>满足条件，则接通。</description><guid isPermaLink="true">https://youlan2333.github.io/post/bi-jiao.html</guid><pubDate>Wed, 28 May 2025 12:47:14 +0000</pubDate></item><item><title>定时器</title><link>https://youlan2333.github.io/post/ding-shi-qi.html</link><description>接通延时定时器：线圈通电，当前值0到32767自增，到达设定值时，触点动作

断开延时定时器：线圈通电，当前值设定值到0自减，到达0时，触点动作

不同分辨率定时器的刷新方式（当前值）

- 1ms：刷新方式基于内部**系统时钟**刷新，独立于扫描周期之外（异步刷新）

- 10ms：刷新方式基于**扫描周期开始**时

- 100ms：刷新方式基于每次**扫描周期被扫描**时，可以用于自振荡电路

自振荡：类比自锁，同为触点控线圈

```
#计时器自振荡电路设计1
|
|-----| T37  |-----|_TON_|T37线圈           
|
#计时器自振荡电路设计2
|-----| Q0.0 |-----|_TON_|T37线圈
|            |
|-----| T37  |-----| Q0.0|
```

。</description><guid isPermaLink="true">https://youlan2333.github.io/post/ding-shi-qi.html</guid><pubDate>Wed, 28 May 2025 12:46:05 +0000</pubDate></item><item><title>位逻辑</title><link>https://youlan2333.github.io/post/wei-luo-ji.html</link><description>#### 即时指令

只能用于输入输出（I区Q区），扫描经过时立即执行，不须等待扫描周期结束，以解除扫描周期限制

#### 上升沿、下降沿

存0来1得1赋1、存1来0得1赋0

sm0.0没有沿

sm0.1只有下降沿

#### 取反

取反能流输入的状态。</description><guid isPermaLink="true">https://youlan2333.github.io/post/wei-luo-ji.html</guid><pubDate>Wed, 28 May 2025 12:45:30 +0000</pubDate></item><item><title>扫描周期</title><link>https://youlan2333.github.io/post/sao-miao-zhou-qi.html</link><description>PLC工作原理即一次扫描周期

1. 采集：单次扫描周期单次采集
2. 运算：支路计算，执行主路
3. 集合
4. 输出

由于一次扫描周期，只能顺序扫描，所以程序是基于**先线圈，后触点**设计（线圈在触点之上）

输出指令是唯一不需要能流，只需要扫描周期扫描经过时执行的指令

（置位复位指令及其他既需要能流，又需要扫描周期）
。</description><guid isPermaLink="true">https://youlan2333.github.io/post/sao-miao-zhou-qi.html</guid><pubDate>Wed, 28 May 2025 12:43:20 +0000</pubDate></item><item><title>Hello，Word！</title><link>https://youlan2333.github.io/post/Hello%EF%BC%8CWord%EF%BC%81.html</link><description>Hello，Word！。</description><guid isPermaLink="true">https://youlan2333.github.io/post/Hello%EF%BC%8CWord%EF%BC%81.html</guid><pubDate>Mon, 07 Apr 2025 14:42:39 +0000</pubDate></item></channel></rss>